HW
Client_Server
     1)	Прочитать про клиент-серверную архитектуру

Клиент-серверная архитектура – это такая архитектура, в которой сетевая нагрузка распределяется между поставщиками услуг, которые называются серверами, и заказчиками услуг, которые называются клиентами. Фактически клиент и сервер – это некое программное обеспечение. Обычно эти программы расположены на разных вычислительных машинах и взаимодействуют между собой через сетевые протоколы. Но также клиент и сервер могут располагаться на одной машине. Самый распространенный протокол – HTTP. 

     2)	Что такое HTTP и HTTPS

HTTP (HyperText Transfer Protocol) – протокол прикладного уровня передачи данных
между клиентом (веб-браузером) и веб-сервером, который в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов.
HTTPS – (HyperText Transfer Protocol Secure) — расширение протокола HTTP для поддержки шифрования в целях повышения безопасности.

     3)	HTTP методы

Методы HTTP-запроса: GET, POST, PUT, DELETE, CONNECT, HEAD, OPTIONS, PATCH, TRACE.
GET – запросы информации
POST – отправка полезной нагрузки на сервер, например, данные из HTML форм, которые заполняет посетитель сайта
PUT – действует подобно POST, также обычно создается какой-то объект на сервере
DELETE – удаление данных либо с сервера, либо с сервера базы данных

     4)	HTTP статус коды сервера

Status code показывает успешность нашего обращения на сервер и может ли он дать нам ответ или есть какие-то преграды для этого.

HTTP коды состояния:
1xx: Informational – запрос получен, понятен, а обработка продолжается. 
Examples: 100 Continue, 101 Switching Protocols

2xx: Success – запрос был успешно получен, понятен и обработан.
Examples: 200 Ok, 201 Created, 202 Accepted

3xx: Redirection (перенаправление) – для выполнения запроса должны быть предприняты дальнейшие действия.
Examples: 300 Multiple Choices, 301 Moved Permanently, 302 Found, 304 Not Modified 

4xx: Client Error – запрос имеет плохой синтаксис или не может быть выполнен.
Examples: 400 Bad request, 403 Forbidden, 422 Unprocessable Entity, 
404 Not Found – самая распространённая ошибка при пользовании Интернетом, 
основная причина – ошибка в написании адреса Web-страницы.

5xx: Server Error – сервер не в состоянии выполнить допустимый запрос. 
Examples: 500 Internal Server Error, 503 Service Unavailable – сервер временно не имеет возможности обрабатывать запросы по техническим причинам (обслуживание, перегрузка и прочее).
     
     5)	Что такое ядро браузера 

Браузер = оболочка + ядро. Ядро браузера – это такая машина, которая распознаёт и начинает выполнять JS скрипты, парсит HTML.

     6)	Какие браузеры какие ядра используют

Microsoft Internet Explorer (до 9) = Trident + Jscript
Microsoft Internet Explorer (после 9) = Trident + Chakra
360 Extreme Explorer = Trident+Blink  
Sogou = Trident + WebKit
Mozilla Firefox = Gecko+JagerMonkey 
Safari = WebKit=webcore+jscore 
Google Chrome = Blink+v8 
Opera = Blink+v8

     7)	Что такое API

API (Application Programming Interface) – это интерфейс для обмена данными с сервера между двумя приложениями или компонентами ПО. Каждый раз, когда пользователь посещает какую-либо страницу в сети, он взаимодействует с API удалённого сервера. API — это составляющая часть сервера, которая получает запросы и отправляет ответы.

     8) Что такое ендпоинты

Endpoint (конечная точка) – это точка касания API сервера. 
Эндпоинт представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения. Endpoint выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.

     9) URL (URI, URL, URN)
 
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
Исторически возник самым первым из понятий и закрепился как синоним термина веб-адрес. URL определяет местонахождение ресурса в сети и способ его (ресурса) извлечения.
Это позволяет нам полностью узнать: как, кому и где можно достать требуемый ресурс, вводя понятия схемы, данных авторизации и местонахождения.
http://www.webdev.com
URN - Unifrorm Resource Name (унифицированное имя ресурса)
Неизменяемая последовательность символов определяющая только имя некоторого ресурса. Смысл URN в том, что им единоразово и уникально именуется какая-либо сущность в рамках конкретного пространства имен (контекста), либо без пространства имен, в общем (что не желательно). Таким образом, URN способен преодолеть недостаток URL связанный с возможным будущим изменением и перемещением ссылок, однако, теперь для того, чтобы знать местонахождение URN ресурса необходимо обращаться к системе разрешения имен URN, в которой он должен быть зарегистрирован.
/accueil/index.html
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
Это лишь обобщенное понятие (множество) идентификации ресурса, включающее в нашем случае как URL, так и URN, как по отдельности, так и совместно. Т.е. мы можем считать, что: URI = URL или URI = URN или URI = URL + URN
http://www.webdev.com/accueil/index.html
Итого: URI - это абстракция концепции идентификации, а URL и URN - это конкретные реализации - полного адреса ресурса и уникального контекстного имени соответственно.
     
     10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций.
Идемпотентные методы: GET, HEAD, PUT, DELETE, OPTIONS, TRACE

     11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Даже если безопасные методы являются по существу "только для чтения", сервер всё равно может сменить своё состояние: например, он может сохранять статистику. Что существенно, так то, когда клиент вызывает безопасный метод, то он не запрашивает никаких изменений на сервере, и поэтому не создаёт дополнительную нагрузку на сервер. Браузеры могут вызывать безопасные методы, не опасаясь причинить вред серверу: это позволяет им выполнять некоторые действия, например, предварительная загрузка без риска. Поисковые роботы также полагаются на вызовы безопасных методов.
Общие безопасные методы: GET, HEAD, OPTIONS

     12) Иденфикация, Аутентификация, Авторизация

Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Скажем, пользователь хочет войти в свой аккаунт Google. Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация. 
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, раз пароль совпал, — это аутентификация.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.
После этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.

     13) Что такое IP

IP — Internet Protocol. Первым объединил отдельные ПК в единую сеть. Можно сказать, что этот протокол является наиболее простым. Он доставляет пакеты по сети Internet без гарантии доставки и без установления соединения.
IP не устанавливает соединение, так как каждый пакет данных передается независимо. Это ненадежный протокол, так как он не гарантирует доставку пакетов: хост-отправитель, хост-получатель и промежуточные хосты не отправляют подтверждения.
Главная задача IP — маршрутизация датаграмм, то есть речь идет об определении пути следования данных по узлам сети. До сего дня наиболее популярной версией являлся IPv4 с 32-битными адресами. Но, как известно, 4.29 млрд IPv4-адресов — это много, но уже давно недостаточно. Поэтому существует IPv6, который призван решить проблему переполнения адресов.
IP-адрес – уникальный сетевой адрес узла (компьютера) в компьютерной сети, построенной по протоколу IP.

     14) Уровни OSI

Сетевой протокол — набор правил, последовательность действий, позволяющих выполнить соединение и обмен данными. Для сетевых протоколов используется сетевая модель OSI (Open System Interconnection — взаимодействие сетевых протоколов). Благодаря ей, сетевые устройства могут между собой коммуницировать.
Модель OSI состоит из семи уровней и реализуется рядом протоколов и правил связи. Каждый уровень имеет четко поставленную цель.
1)	Физический (Physical) На самой нижней ступени модели OSI находится физический уровень. Он занимается непосредственно передачей информации. Здесь сигналы (радиосигналы, электрические, оптические) уходят от отправителя к получателю. На текущем уровне речь идёт о кабелях, радиоэфире, кодировании нулей и единиц и др. Сигнал первого уровня – это группа напряжений различной амплитуды, волн либо радиочастот. Один из основных стандартов среди технологий физического уровня – Ethernet.
2)	Канальный уровень (Data Link) После получения сигнала с предыдущего физического уровня, на следующем (канальном) уровне происходит проверка и исправление погрешностей передачи. Здесь появляются термины «фрейм» и «MAC-адрес». MAC адреса занимают 48 бит в шестнадцатиричном формате и могут записываться, например, таким образом: 00:26:57:00:1f:02. Второй уровень более сложный, чем предыдущий, физический. Устройствами второго, канального, уровня считаются мосты и коммутаторы.
3)	Сетевой уровень (Network) Над канальным уровнем находится следующий – сетевой. На этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Для трансформации MAC-адресов в IP применяется протокол ARP. Здесь осуществляется маршрутизация трафика. Когда пользователь, к примеру, желает перейти на сайт и вводит его адрес, отправляется DNS-запрос. Ответом на него будет IP-адрес, который подставляется в пакет. Пакет 
данных – это новый термин, который появляется на 3-м сетевом уровне. Устройствами здесь являются роутер или маршрутизатор.
4)	Транспортный уровень (Transport) Здесь происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, размеры которых будут зависеть от используемого протокола. Для транспортного уровня это TCP и UDP. Какой из них лучше использовать, зависит от типа передаваемых данных.
TCP (Transmission Control Protocol) – протокол, хорошо подходящий для передачи трафика, для которого любые потери пакетов чувствительны. Процесс передачи контролируется, благодаря чему потерянные пакеты будут обнаружены и запрошены повторно.
UDP (User Datagram Protocol) применяется, когда потеря нескольких пакетов не принципиальна. Например, при передаче видео, изображений.
5)	Сеансовый уровень (Session) Сеансовый уровень в ответе за организацию сеансов связи между приложениями на компьютерах. Он отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы. К протоколам сеансового уровня, например, относятся X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP.
6)	Уровень представления (Presentation) На шестой ступени осуществляется преобразование форматов данных, например, сжатие и кодирование.
7)	Уровень приложений (Application) Верхний уровень модели, где располагаются сетевые службы, с которыми напрямую взаимодействуют пользователи. Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие. 
Когда осуществляется передача с верхнего на нижний, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией.
     15) Хедеры http запросов

Заголовки HTTP являются основной частью этих HTTP-запросов и ответов, и они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом. В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение. Пробелы перед значением игнорируются. 
В зависимости от того, где эти заголовки могут находиться, они разделяются на:
General Headers (Основные заголовки) — должны быть и в запросах, и в ответах клиента и сервера.
Request Headers (Заголовки запроса) — используются только в запросах клиента.
Response Headers (Заголовки ответа) — используются только в ответах сервера.
Entity Headers (Заголовки сущности) — сопровождают каждую сущность сообщения.
Первая строка HTTP-запроса - это "Request Line", которая содержит некоторую базовую информацию по запросу. Остальные - HTTP заголовки.
Первая строка ответа HTTP - это «Строка состояния», за которой следуют «HTTP-заголовки», до пустой строки. После этого начинается «содержимое».
